package br.com.rafaellino.stockmarket.service;

import br.com.rafaellino.stockmarket.StockPriceGrpc;
import br.com.rafaellino.stockmarket.StockRequest;
import br.com.rafaellino.stockmarket.StockResponse;
import io.grpc.Context;
import io.grpc.stub.StreamObserver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.grpc.server.service.GrpcService;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.Instant;
import java.util.Random;

@GrpcService // exposed as gRPC service
public class StockPriceImpl extends StockPriceGrpc.StockPriceImplBase { // generated by `mvn generate-sources` in target

  private static final Logger log = LoggerFactory.getLogger(StockPriceImpl.class);

  private static final Random random = new Random();

  @Override
  public void getStockPrice(StockRequest request, StreamObserver<StockResponse> responseObserver) {
    log.info("response received of symbol {}", request.getSymbol());


    StockResponse response = StockResponse.newBuilder()
            .setPrice(BigDecimal.valueOf(random.nextFloat(999)).setScale(2, RoundingMode.FLOOR).doubleValue())
            .setSymbol(request.getSymbol())
            .setTimestamp(Instant.now().toEpochMilli())
            .build();
    responseObserver.onNext(response);
    responseObserver.onCompleted();
    log.info("response done");
  }

  @Override
  public void getStockPriceServerStreaming(StockRequest request, StreamObserver<StockResponse> responseObserver) {
    // timeout: 60
    // deadline: 12:51 -> tempo fixo que o cliente para de receber as mensagens
    StockResponse response;
    StockResponse.Builder responseBuilder = StockResponse.newBuilder().setSymbol(request.getSymbol());
    while (!Context.current().isCancelled()) { // termina o stream somente quando receber deadline
      try {
        Thread.sleep(500);
      } catch (Exception ex) {
        // ignored
      }
      response = responseBuilder
              .setPrice(BigDecimal.valueOf(random.nextFloat(999)).setScale(2, RoundingMode.FLOOR).doubleValue())
              .setTimestamp(Instant.now().toEpochMilli())
              .build();
      log.info("fetching...");
      responseObserver.onNext(response);
    }
    responseObserver.onCompleted();
    log.info("response stream done");
  }
}
